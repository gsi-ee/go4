# ----------- go4.prefs file ------------
# Syntax is 
#    param_name: paramerer_value 
#
# For value one can use other parameters like
#    param_name: %param2_name% paramerer_value 
#
# One can set condition, based on some parameters values like os, hostname:
#    hostname=lxi*: ssh: ssh -x -P 235 user@%hostname% "%hostcmd%" &
#
# Any line started with '#', recognized as comment line
# One can create go4.prefs file in current gui directory and redefine some of parameters
# For instance, file with following content allows to start analysis on SuSE 11 node:
#
#     hostname=suse11host: shellinitcmd:. go4login; 
#     hostname=suse11host: konsole_options:
#     hostname=suse11host: workdir:/usr/local/go4/head/Go4ExampleSimple
#     hostname=suse11host: exekind:1
#     hostname=suse11host: libname:/usr/local/go4/head/Go4ExampleSimple/libGo4UserAnalysis.so
# 

######################################################################
# here is remote shell settings

# this is command for ssh without X (inside qtwindow)
ssh: ssh -x %hostname% "%hostcmd%"

# this is command for ssh with X enabled
sshX: ssh -X %hostname% "%hostcmd%" &

# this is common command for rsh (with and without X) 
rsh: rsh -n %hostname% "%hostcmd%" &

# this is execution on local node without any remote shell  
# for window program itself must be executed, no shell variable or other options will be set   
os=win32: exec: %hostcmd%

# in normal case execution in gui runs via /bin/sh    
exec: sh -c "%hostcmd%" &

######################################################################
# here is terminal settings, it defines "hostcmd", 
# which depend from terminal kind: qtwindow/xterm/konsole  

qtwindow: %initcmd% %cd_workdir% %progcmd%

xterm: %initcmd% %cd_workdir% xterm -T %clientkind%:%analysisname%@%hostname% -e \"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH; %progcmd%\"

konsole: %initcmd% konsole %konsole_options% --workdir %workdir% -e %progcmd%

#konsole_options:--nomenubar --notoolbar -T %clientkind%:%analysisname%
konsole_options:-caption %clientkind%:%analysisname%

##################################################################
# here is program execution section, defined if analysis should be started as server or client
#for linux use always localhost for guihost

#for exec mode (and ssh localhost) always use loop-back address for connection with gui 
shellkind=exec: guihost: 127.0.0.1
shellkind=ssh*: hostname=localhost: guihost: 127.0.0.1

servercmd:%analysis% -server %analysisname% %userargs%

httpcmd: %analysis% -http %guiport% -norun %userargs%

clientcmd:%analysis% -gui %analysisname% %guihost% %guiport% %userargs%
#JAM activate following line instead of the above to run analysis under gdb:
#clientcmd:(echo r ; cat) | gdb --args %analysis% -gui %analysisname% %guihost% %guiport% %userargs%


##################################################################
# two variants of analysis - as executable and as library
# defined by parameter 'exekind' (specified in gui)  0-executable, 1-library
# if executable parameter 'exename' is configured via gui, for library - 'libname'
# if appropriate name parameter empty, default executable name will be taken 

analysis_exe:%exename%

analysis_default_exe:MainUserAnalysis

analysis_lib:go4analysis -lib %libname%

analysis_default_lib:go4analysis

##################################################################
# here is initialization sequence is defined, depending if execution performed in 
# remote shell or in gui context (via exec) 

shellinitcmd:%asguiinitcmd%

execinitcmd:%asisinitcmd%

asguiinitcmd:export GO4SYS=${GO4SYS}; export ROOTSYS=${ROOTSYS}; export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}; export PATH=${PATH}; 

asisinitcmd:

cd_workdir:cd %workdir%;

####################################################################
# this is kill cmd, will be combined together with shell login to kill application 

kill:killall %killexename%
